apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres-deployment
  namespace: {{ .Values.app.name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
      - name: postgres
        image: "postgres:{{ .Values.app.database.postgres.version }}"
        env:
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-secrets
              key: password
        - name: POSTGRES_USER
          value: {{ .Values.app.database.postgres.username }}
        - name: POSTGRES_MULTIPLE_DATABASES
          value: {{ .Values.app.database.postgres.databases }}
        ports:
        - containerPort: 5432
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: init-script 
          mountPath: /docker-entrypoint-initdb.d
      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-pvc
      - name: init-script 
        configMap: 
          name: postgres-init-script

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
  namespace: {{ .Values.app.name }}
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

--- 
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: {{ .Values.app.name }}
stringData:
  password: {{ .Values.app.database.postgres.password }}

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: {{ .Values.app.name }}
spec:
  selector:
    app: postgres 
  ports:
  - protocol: TCP
    port: 5432 
    targetPort: 5432 
  type: ClusterIP

--- 
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-script
  namespace: {{ .Values.app.name }}
data:
  init.sh: |
    #!/bin/bash
    set -e
    set -u

    function create_user_and_database() {
      local database=$1
      echo "  Creating user and database '$database'"
      psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" <<-EOSQL
          CREATE USER $database;
          CREATE DATABASE $database;
          GRANT ALL PRIVILEGES ON DATABASE $database TO $database;
    EOSQL
    }
    if [ -n "$POSTGRES_MULTIPLE_DATABASES" ]; then
      echo "Multiple database creation requested: $POSTGRES_MULTIPLE_DATABASES"
      for db in $(echo $POSTGRES_MULTIPLE_DATABASES | tr ',' ' '); do
        create_user_and_database $db
      done
      echo "Multiple databases created"
    fi
---
